---
title: "Unveiling the Mystery: Exploring Patterns and Associations in UFO Sightings Data"
subtitle: "INFO 526 - Spring 2024 - Project 1"
author: "Agastya Deshraju, Usama Ahmed, Naitik Shah, Gorantla Sai Laasya, Divya Dhole, Lakshmi Anchula"
title-slide-attributes:
  data-background-image: images/watercolour_sys02_img34_teacup-ocean.jpg
  data-background-size: stretch
  data-background-opacity: "0.7"
  data-slide-number: none
format:
  revealjs:
    theme:  ['data/customtheming.scss']
  
editor: visual
execute:
  echo: false
---

```{r}
#| label: load-packages
#| include: false

# Load packages here
pacman::p_load(tidymodels,
               tidyverse,
               gganimate,
               dplyr,
               kableExtra,
               lubridate
               )



```

```{r}
#| label: setup
#| include: false

# Plot theme
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 11))

# For better figure resolution
knitr::opts_chunk$set(
  fig.retina = 3, 
  dpi = 300, 
  fig.width = 6, 
  fig.asp = 0.618 
  )
```

```{r}
#| label: load-data
#| include: false
# Load data here
data(mtcars)
mtcars$speed <- mtcars$hp / mtcars$wt

data("penguins")
```



```{r, fig.width=14}

#Question 2 Answer

#Loading the Data from Github

ufo_sightings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/ufo_sightings.csv')
places <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/places.csv')
day_parts_map <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/day_parts_map.csv')

# Assuming ufo_sightings and places are already loaded as data frames
ufo_sightings <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/ufo_sightings.csv")
places <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/places.csv")

# Merge on city and state, adjust columns as needed
ufo_sightings_enriched <- left_join(ufo_sightings, places, by = c("city", "state"))

##

# Convert reported_date_time to Date
ufo_sightings_enriched$reported_date <- as.Date(ufo_sightings_enriched$reported_date_time, format="%Y-%m-%dT%H:%M:%SZ")

# Function to assign seasons based on dates
get_season <- function(date) {
  year <- format(date, "%Y")
  start_spring <- as.Date(paste(year, "-03-21", sep=""))
  start_summer <- as.Date(paste(year, "-06-21", sep=""))
  start_autumn <- as.Date(paste(year, "-09-23", sep=""))
  start_winter <- as.Date(paste(year, "-12-21", sep=""))
  
  if (date >= start_spring & date < start_summer) {
    return('spring')
  } else if (date >= start_summer & date < start_autumn) {
    return('summer')
  } else if (date >= start_autumn & date < start_winter) {
    return('autumn')
  } else {
    return('winter')
  }
}

# Apply the season function to the sightings data
ufo_sightings_enriched$season <- sapply(ufo_sightings_enriched$reported_date, get_season)



## Step 2: Analyze Seasonal Patterns

# Calculate the number of sightings for each season
season_distribution <- table(ufo_sightings_enriched$season)

# Print season distribution
print(season_distribution)

  
# Assume day_parts_map is loaded
day_parts_map <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/day_parts_map.csv")

#Step 4: Visualize the Data

ggplot(ufo_sightings_enriched, aes(x=season)) +
  geom_bar() +
  xlab("Season") + ylab("Count of UFO Sightings") +
  ggtitle("UFO Sightings by Season")

# Assuming your 'ufo_sightings' dataset has a 'reported_date_time_utc' column
ufo_sightings$reported_date_time_utc <- as.POSIXct(ufo_sightings$reported_date_time_utc, format="%Y-%m-%dT%H:%M:%SZ", tz="UTC")

library(ggplot2)
library(dplyr)

# Aggregate data by season and year for plotting
seasonal_counts <- ufo_sightings_enriched |>
  group_by(season, year = format(reported_date_time_utc, "%d %B %Y")) |>
    summarize(count = n(), .groups = 'drop')

seasonal_counts <- subset(seasonal_counts, year >= '1973')

# Plot
p <- ggplot(seasonal_counts, aes(x=year, y=count, color=season, group=1)) +
  geom_line() +
  labs(title="UFO Sightings by Season Over Years",
       x="Year",
       y="Number of Sightings",
       color = "Season") + 
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.text.x = element_text(angle = 90, hjust = 0),
        plot.title.position = "plot",
        legend.position = "top") +
  transition_reveal(year) +
  ease_aes("linear")


animate(p, renderer = gifski_renderer(), height = 400, width = 600, duration = 5, fps = 10)

ggplotly(k, dynamicTicks = T)



```

``` 













# Using Quarto for presentations

## Quarto

-   The presentation is created using the Quarto CLI

-   `##` sets the start of a new slide

## Layouts

You can use plain text

::: columns
::: {.column width="40%"}
-   or bullet points[^1]
:::

::: {.column width="60%"}
or in two columns
:::
:::

[^1]: And add footnotes

-   like

-   this

## Code

```{r, echo=FALSE}

model <- lm(mpg ~ speed, data = mtcars) 

model |> tidy()

model |> glance()

```

## Plots

```{r}
penguins |>
  mutate(species = ifelse(species == "Adelie", "Adelie", "Other")) |>
  ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point()
```

## Plot and text

::: columns
::: {.column width="50%"}
-   Some text

-   goes here
:::

::: {.column width="50%"}
```{r, warning=FALSE, fig.width=5.5}
penguins |>
  ggplot(aes(x = bill_length_mm, y = species, color = species)) +
  geom_boxplot(linewidth = 0.75,
               outlier.size = 2.5) +
  theme_minimal(base_size = 15) +
  theme(legend.key.size = unit(0.8, "cm"))
```
:::
:::

# A new section...

## Tables

If you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,

```{r}
penguins |> 
  head() |>
  kableExtra::kable() |>
  kableExtra::kable_styling()
```

## Images

![Image credit: Danielle Navarro, Percolate.](images/watercolour_sys02_img34_teacup-ocean.png){fig-align="center" width="500"}

## Math Expressions {.smaller}

You can write LaTeX math expressions inside a pair of dollar signs, e.g.Â \$\\alpha+\\beta\$ renders $\alpha + \beta$. You can use the display style with double dollar signs:

```         
$$\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i$$
```

$$
\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i
$$

Limitations:

1.  The source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting `$$` must appear in the very beginning of a line, followed immediately by a non-space character, and the ending `$$` must be at the end of a line, led by a non-space character;

2.  There should not be spaces after the opening `$` or before the closing `$`.

# Wrap up

## Feeling adventurous?

-   You are welcomed to use the default styling of the slides. In fact, that's what I expect majority of you will do. You will differentiate yourself with the content of your presentation.

-   But some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs.

